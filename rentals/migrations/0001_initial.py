# Generated by Django 5.2.6 on 2025-09-19 07:13

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Invalid email format.')])),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('tax_number', models.CharField(blank=True, help_text='Tax identification number (if applicable).', max_length=50)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Owner',
                'verbose_name_plural': 'Owners',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True, validators=[django.core.validators.EmailValidator(message='Invalid email format.')])),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('id_document', models.FileField(blank=True, help_text='Scan of ID or passport.', upload_to='tenants/id_documents/')),
                ('emergency_contact', models.CharField(blank=True, help_text='Name and phone of emergency contact.', max_length=200)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Tenant',
                'verbose_name_plural': 'Tenants',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Building',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('address', models.TextField()),
                ('total_general_charges', models.DecimalField(decimal_places=2, default=0, help_text='Total monthly general charges for the entire building.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('has_individual_meters', models.BooleanField(default=True, help_text='Can individual consumption (water, electricity) be measured per unit?')),
                ('owner', models.ForeignKey(blank=True, help_text='Main owner of the building (can be overridden per property).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='buildings', to='rentals.owner')),
            ],
            options={
                'verbose_name': 'Building',
                'verbose_name_plural': 'Buildings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House'), ('room', 'Room (for shared accommodation)')], max_length=20)),
                ('unit_number', models.CharField(help_text='Apartment number, room number, or other identifier.', max_length=50)),
                ('size_m2', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(0)])),
                ('monthly_rent', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('specific_charges', models.DecimalField(decimal_places=2, default=0, help_text='Monthly charges specific to this unit (e.g., individual water meter).', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_available', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='rentals.building')),
                ('owner', models.ForeignKey(blank=True, help_text='Owner of this specific property (defaults to building owner).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='properties', to='rentals.owner')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
                'ordering': ['building__name', 'unit_number'],
            },
        ),
        migrations.CreateModel(
            name='LeaseContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lease_type', models.CharField(choices=[('standard', 'Standard Lease'), ('colocation', 'Colocation (Shared Accommodation)')], default='standard', max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('has_solidarity_clause', models.BooleanField(default=False, help_text='For colocations: if True, all tenants are jointly liable.')),
                ('flat_rate_charges', models.DecimalField(decimal_places=2, default=0, help_text='Fixed monthly charges (used when individual consumption cannot be measured).', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=0, help_text='Security deposit amount.', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('terminated', 'Terminated'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('contract_document', models.FileField(blank=True, help_text='Signed contract document (PDF).', upload_to='lease_contracts/')),
                ('notes', models.TextField(blank=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lease_contracts', to='rentals.property')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lease_contracts', to='rentals.tenant')),
            ],
            options={
                'verbose_name': 'Lease Contract',
                'verbose_name_plural': 'Lease Contracts',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ChargeDistribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distribution_percentage', models.DecimalField(decimal_places=2, help_text='Percentage of general charges allocated to this property (0-100).', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('start_date', models.DateField(default=django.utils.timezone.now)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charge_distributions', to='rentals.building')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='charge_distributions', to='rentals.property')),
            ],
            options={
                'verbose_name': 'Charge Distribution',
                'verbose_name_plural': 'Charge Distributions',
                'unique_together': {('building', 'property', 'start_date')},
            },
        ),
    ]
